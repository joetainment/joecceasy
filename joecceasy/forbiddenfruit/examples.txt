
Forbidden Fruit
=======================

This project allows Python code to extend built-in types.

If that's a good idea or not, you tell me. The first need this project attended was allowing a Python assertion library to implement a similar API to RSpec Expectations and should.js. But people got creative and used it to among other things spy on things or to integrate profiling.
Tiny Example

It basically allows you to patch built-in objects, declared in C through python. Just like this:

    Add a new method to the int class:

>>> from forbiddenfruit import curse
>>> def words_of_wisdom(self):
...     return self * "blah "
>>> curse(int, "words_of_wisdom", words_of_wisdom)
>>> assert (2).words_of_wisdom() == "blah blah "

    Add a classmethod to a built-in class

>>> from forbiddenfruit import curse
>>> def hello(self):
...     return "blah"
>>> curse(str, "hello", classmethod(hello))
>>> assert str.hello() == "blah"

Reversing a curse

If you want to free your object from a curse, you can use the reverse() function. Just like this:

>>> from forbiddenfruit import curse, reverse
>>> curse(str, "test", "blah")
>>> assert 'test' in dir(str)
>>> # Time to reverse the curse
>>> reverse(str, "test")
>>> assert 'test' not in dir(str)

Compatibility

Forbidden Fruit runs on all cpython versions I tested so far, which includes the versions 2.5, 2.6, 2.7, 3.2 and 3.3. Since Forbidden Fruit is fundamentally dependent on the C API, this library won't work on other python implementations, such as Jython, pypy, etc.