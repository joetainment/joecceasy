Example of unittest:

class TestEasyArgsForLoop(unittest.TestCase):
    def test_easy_args_for_loop(self):
        r = easy_args_for_loop()
        ## Example, here we could check something
        self.assertEqual(  r, r )  ## todo - put something else here
        ## Example, here we make sure an error gets raised
        ## the error type we're looing for goes in the parens
        with self.assertRaises(AssertionError): ## todo - use different type
            assert(False) ## todo - actually generate specific error
    
if __name__ == '__main__':
    unittest.main()


or, use funcs, as in the Python documentation...


    def testSomething():
        something = makeSomething()
        assert something.name is not None
        # ...

    one can create an equivalent test case instance as follows, with optional set-up and tear-down methods:

    testcase = unittest.FunctionTestCase(testSomething,
                                         setUp=makeSomethingDB,
                                         tearDown=deleteSomethingDB)

    Note:
    Even though FunctionTestCase can be used to quickly convert an existing test base over to a unittest-based system, this approach is not recommended. Taking the time to set up proper TestCase subclasses will make future test refactorings infinitely easier. 